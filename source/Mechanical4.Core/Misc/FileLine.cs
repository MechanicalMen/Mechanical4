using System;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Mechanical4.Core.Misc
{
    /// <summary>
    /// Combines file, member and line information into a single string.
    /// </summary>
    public static class FileLine
    {
        //// NOTE: Unfortunately parsing stack frames is very hard, since they are localized, e.g.:
        ////        - english: "  at <member> in <file>:line <line>"
        ////        - hungarian: "  a következő helyen: <member> hely: <file>, sor: <line>"
        ////
        ////       The situation is made worse by some of the strangeness turning up in Xamarin stack traces:
        ////       "  at (wrapper remoting-invoke-with-check) System.Net.NetworkInformation.Ping:Send (string,int)"
        ////
        ////       Using System.Diagnostics.StackTrace and StackFrame would be nice, but as of the time of writing this
        ////       neither the portable libraries, nor the .NET Platform Standard seem to support them.

        #region Private Static Members

        private static readonly char[] DirectorySeparatorChars = new char[] { '\\', '/' };

        private static string ToFileName( string filePath )
        {
            //// let's not expose the developer's directory structure!
            //// (may contain sensitive information, like user names, ... etc.)

            if( !filePath.NullOrWhiteSpace() )
            {
                // System.IO.Path expects the directory separators
                // of the platform this code is being run on. But code may
                // have been compiled on a different platform! (e.g. building an app on Windows, and running it on Android)
                int directorySeparatorAt = filePath.LastIndexOfAny(DirectorySeparatorChars);
                if( directorySeparatorAt != -1 )
                {
                    filePath = filePath.Substring(startIndex: directorySeparatorAt + 1);
                }
                else
                {
                    //// no directory separator?
                    //// only if this string was not (directly) generated by the compiler!
                }
            }

            return filePath;
        }

        #endregion

        /// <summary>
        /// Reproduces the standard, english .NET stack trace format (i.e. "  at &lt;member&gt; in &lt;file&gt;:line &lt;line&gt;").
        /// </summary>
        /// <param name="file">The source file of the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in <paramref name="file"/>.</param>
        /// <returns>The string representation of the specified file, member and line.</returns>
        public static string EnglishDotNet(
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            return string.Format(CultureInfo.InvariantCulture, "  at {0} in {1}:line {2}", member, ToFileName(file), line);
        }

        /// <summary>
        /// Produces a shorter string, that does not contain leading whitespaces, or additional words.
        /// </summary>
        /// <param name="file">The source file of the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in <paramref name="file"/>.</param>
        /// <returns>The string representation of the specified file, member and line.</returns>
        public static string Compact(
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            return string.Format(CultureInfo.InvariantCulture, "{0}, {1}:{2}", member, ToFileName(file), line);
        }

        /// <summary>
        /// Parses a string produced using <see cref="Compact"/>.
        /// </summary>
        /// <param name="str">The string to parse.</param>
        /// <param name="file">The file name in <paramref name="str"/>.</param>
        /// <param name="member">The member name in <paramref name="str"/>.</param>
        /// <param name="line">The line number in <paramref name="str"/>.</param>
        public static void ParseCompact( string str, out string file, out string member, out int line )
        {
            if( str.NullReference() )
                throw Exc.Null(nameof(str));

            int memberAt = str.IndexOf(',');
            if( memberAt == -1 )
                throw new FormatException($"Member separator not found! ({str})");
            else
                member = str.Substring(startIndex: 0, length: memberAt).Trim();

            int lineAt = str.LastIndexOf(':');
            if( lineAt == -1 )
                throw new FormatException($"Line separator not found! ({str})");
            else if( !int.TryParse(str.Substring(startIndex: lineAt + 1), NumberStyles.Integer, CultureInfo.InvariantCulture, out line) )
                throw new FormatException($"Line number could not be parsed! ({str})");

            file = str.Substring(startIndex: memberAt + 1, length: lineAt - memberAt - 1).Trim();
        }
    }
}
